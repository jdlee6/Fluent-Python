Filtering generator functions

*First group are Filtering Generator Functions: 
    yields a subset of items produced by the input iterable, without changing the items themselves
    most functions take a predicate which is a one-argument boolean function that will be applied to each item in the input to determine whether the item is included in the output

**predicate is a function that returns the truth value of some condition

module                  function                                                      description
itertools           compress(it, selector_it)    consumes two iterables in parallel; yields items from it                                                                                     whenever the corresponding item in selector_it is truthy

itertools           dropwhile(predicate, it)    consumes it skipping items while predicate computes truthy, then yields                                                                      every remaining item (no further checks are made)

(built-in)         filter(predicate, it)             applies predicate to each item of iterable, yielding the item if                                                                        predicate(item) is truthy; if predicate is None, only                                                                      truthy items are yielded

itertools          filterfalse(predicate, it)      same as filter, with the predicate logic negated: yields items whenever                                                                   predicate computes falsy

itertools          islice(it, stop) or islice(it, start, stop, step=1)   yields items from a slice of it,                                                                                                    similar to s[:stop] or s[start:step:stop]                                                                                  except it can be ANY iterable and the                                                                                      operation is lazy

itertools          takewhile(predicate, it)      yields items while predicate computes truthy, then stops and no further                                                                     checks are made


###########################################################################################################################

Mapping Generators: yield items computed from each individual item in the input iterable - or iterables, in the case of map and starmap
    yield one result per item in the input iterables; if input comes from more than one iterable - the output stops as soon as the first input iterable is exhaused

module                  function                                                      description
itertools           accumulate(it, [func])                  yields accumulated sums; if func is provided, yields the                                                                                    result of applying it the first pair of items,                                                                             then to the first result and next item etc.

(built-in)         enumerate(iterable, start=0)         yields 2-tuple of the form (index, item) where index is counted                                                                                 from start and item is taken from the                                                                                      iterable 

(built-in)         map(func, it1, [it2, ..., itN])          applies func to each item of it, yielding the result ; if N                                                                                 iterables are given, func must take N                                                                                      arguments and the iterables will be consumed                                                                               in parallel

itertools          starmap(func, it)                           applies func to each item of it, yielding the result; the                                                                                input iterable should yield iterable items                                                                                 iit, and func is applied as func(*iit)

###########################################################################################################################

Merging (multiple inputs) generators: yield items from multiple input iterables 
    *chain and chain.from_iterable consume the input iterables sequentially (one after the other)
    *product, zip, and zip_longest consume the input iterables in parallel

module                  function                                                      description
itertools             chain(it1, ..., itN)                     yield all items from it1, then from it2 etc., seamlessly

itertools             chain.from_iterable(it)            yield all items from each iterable produced by it, one after the                                                                             other seamlessly; it should yield iterable                                                                                 items for example a list of iterables

itertools             product(it1, ..., itN, repeat=1)     cartesian product: yields N-tuples made by combining items from                                                                                each input iterable liked nested for loops                                                                                 could produce; repeat allows the input                                                                                     iterables to be consumed more than once

(built-in)            zip(it1, ..., itN)                        yields N-tuples built from items take from the iterables                                                                             in parallel, silently stopping when the first                                                                              iterable is exhausted

itertools             zip_longest(it1, ..., itN, fillvalue=None)     yields N-tuples built from items taken from the                                                                                                      iterables in parallel,                                                                                                     stopping only when the last                                                                                                iterable is exhausted,                                                                                                     filling the blanks with the                                                                                                fillvalue

###########################################################################################################################

Generator functions that expand each input item into multiple output items

module                  function                                                      description
itertools             combinations(it, out_len)                   yield combinations of out_len items from the items                                                                                            yielded by it

itertools             combinations_with_replacement(it, out_len)    yield combinations of out_len items from the items                                                                       yielded by it, including combinations with repeated items

itertools             count(start=0, step=1)             yields number starting at start, incremented by step, indefinitely

itertools             cycle(it)                            yields items from it storing a copy of each, then yields the                                                                        entire sequence repeatedly, indefinitely

itertools             repeat(item, [times])        yield the given item repeatedly, indefinitely unless a number of times                                                                     is given

###########################################################################################################################

Rearranging generator functions: yield all items in the input iterables ut rearranged in some way
**returns multiple generators: itertools.groupby and itertools.tee
**reveresed built-in does NOT accept any iterable as input, but ONLY sequences (reversed will yield the items from last to first, it ONLY works with a sequence with a known length)

module                  function                                                      description
itertools               groupby(it, key=None)                   yields 2-tuples of the form (key, group), where key is the                                                                                     grouping criterion and group is a                                                                                          generator yielding the items in the                                                                                        group

(built-in)              reversed(seq)                                  yields items from seq in reversed order, from last                                                                                      to first; seq must be a sequence or                                                                                        implement the __reversed__ special                                                                                         method

itertools               tee(it, n=2)                                    yields a tuple of N generators, each yielding the                                                                                    items of the input iterable independently


###########################################################################################################################

Built in functions that read iterables and return single values

module                  function                                                      description
built in                    all(it)                                     returns True if all items in it are truthy, otherwise False; all([]) returns True

built in                    any(it)                                   returns True if any item in it is truthy, otherwise False; any([]) returns False

built in                    max(it, [key=], [default=])   returns the maximum value of the items in it; key is an ordering                                                                              function as in sorted; default is returned if                                                                              the iterable is empty

built in                    min(it, [key=], [default=])    returns the minimum value of the items in it. key is an                                                                                      ordering function, as in sorted; default is                                                                                returned if the iterable is empty

functools                 reduce(func, it, [initial])       returns the result of applying func to the first pair of items,                                                                              then to that result and the third item and                                                                                 so on; if given, initial forms the initial                                                                                pair with the first item

built in                     sum(it, start=0)                    the sum of all items in it, with the optional start value                                                                              added footnote: [use math.fsum for better                                                                                  precision when adding floats]