METHODS OF MAPPING TYPES DICT


dict
-----------------------------------
d.clear() --> remove all items
d.__contains__(k) --> k in d
d.copy() --> shallow copy
d.__delitem__(k) --> del d[k] - remove item with key k
d.fromkeys(it, <<initial>>) --> get item with key k, return default or None if missing
d.__getitem__(k) --> d[k] - get item with key k
d.items() --> get view over items - (key, value) pairs
d.__iter__() --> get iterator over keys
d.keys() --> get view over keys
d.__len__() --> len(d) - number of items
d.move_to_end(k, <<last>>)  --> move k first or last position (last is True by default)
d.popitem() --> remove and return an arbitrary (key, value) item
d.setdefault(k, <<default>>) - if k in d, return d[k]; else set d[k] = default and return it
d.__setitem__(k, v) --> d[k] = v - put v at k
d.update(m, <<**kwargs>>) --> update d items from mapping or terable of (key, value) pairs
d.values() --> get view over values


default dict
-----------------------------------
d.clear() --> remove all items
d.__contains__(k) --> k in d
d.copy() --> shallow copy
d.__copy__() --> support for copy.copy 
d.default_factor --> callable invoked by __missing__ to set missing values
d.__delitem__(k) --> del d[k] - remove item with key k
d.fromkeys(it, <<initial>>) --> get item with key k, return default or None if missing
d.__getitem__(k) --> d[k] - get item with key k
d.items() --> get view over items - (key, value) pairs
d.__iter__() --> get iterator over keys
d.keys() --> get view over keys
d.__len__() --> len(d) - number of items
d.__missing__(k) --> called when __getitem__ cannot find the key

d.pop(k, <<default>>) --> remove and return value at k, or default or None if missing
**removes the first item inserted (FIFO); an optional last argument, if set tot True, pops
the last item (LIFO)

d.popitem() --> remove and return an arbitrary (key, value) item
d.setdefault(k, <<default>>) - if k in d, return d[k]; else set d[k] = default and return it
d.__setitem__(k, v) --> d[k] = v - put v at k
d.update(m, <<**kwargs>>) --> update d items from mapping or terable of (key, value) pairs
d.values() --> get view over values


OrderedDict
-----------------------------------
d.clear() --> remove all items
d.__contains__(k) --> k in d
d.copy() --> shallow copy
d.__copy__() --> support for copy.copy 
d.__delitem__(k) --> del d[k] - remove item with key k
d.fromkeys(it, <<initial>>) --> get item with key k, return default or None if missing
d.__getitem__(k) --> d[k] - get item with key k
d.items() --> get view over items - (key, value) pairs
d.__iter__() --> get iterator over keys
d.keys() --> get view over keys
d.__len__() --> len(d) - number of items
d.move_to_end(k, <<last>>)  --> move k first or last position (last is True by default)
d.pop(k, <<default>>) --> remove and return value at k, or default or None if missing
d.popitem() --> remove and return an arbitrary (key, value) item
d.__reversed__() --> get iterator for keys from last to first inserted
d.setdefault(k, <<default>>) - if k in d, return d[k]; else set d[k] = default and return it
d.__setitem__(k, v) --> d[k] = v - put v at k
d.update(m, <<**kwargs>>) --> update d items from mapping or terable of (key, value) pairs
d.values() --> get view over values


MATHEMATICAL SET OPERATIONS

s & z       s.__and__(z)                                    intersection of s and z
z & s       s.__rand__(z)                                   reversed & operator
                s.intersection(it, ...)                         intersection of s and all sets built from iterables it etc.
s &= z      s.__iand__(z)                                  s updated with intersection of s and z
                s.intersection_update(it, ...)             s updated with intersection of s and all sets
                                                                        built from iterables it etc.

s | z          s.__or__(z)                                      union of s and z
z | s          s.__ror__(z)                                    reversed |
                s.union(it, ...)                                   union of s and all sets built from iterables it etc.
s |= z        s.__ior__(z)                                      s updated with union of s and z
                s.update(it, ...)                                  s updated with union of s and all sets built from                                                                iterables it etc.

s - z           s.__sub__(z)                                   relative complement or difference between s and z
z - s           s.__rsub__(z)                                  reversed - operator
s -= z         s.__isub__(z)                                  s updated with difference between s and z
                 s.difference_update(it, ...)               s updated with differnece between s all sets built from                                                                 iterables it etc
                 s.symmetric_difference(it)              complement of s & set(it)

s ^ z          s.__xor__(z)                                                      symmetric difference (the complement of                                                                                               the intersection s & z)
z ^ s          s.__rxor__(z)                                                     reversed ^ operator
                 s.symmetric_difference_update(it, ...)               s updated with symmetric difference of s and all                                                                                 sets built from iterables it                                                                               etc
s ^= z        s.__ixor__(z)                                                     s updated with symmetric difference of s                                                                                               and z


SET COMPARISON OPERATORS AND METHODS THAT RETURN A BOOL

                                s.isdisjoint(z)                           s and z are disjoint (have no elements in common)
e in s                        s.__contains__(e)                    element e is a member of s
s <= z                      s.__le__(z)                               s is a subset of the z set
                                s.issubset(it)                             s is a subset of the set built from the                                                          iterable it
s  < z                       s.__lt__(z)                                s is a proper subset of the z set
s >= z                      s.__ge__(z)                              s is a superset of the z set
                                s.issuperset(it)                          s is a superset of the set built from the                                                         iterable it
s > z                         s.__gt__(z)                              s is a proper superset of the z set


SET METHODS

s.add(e)
s.clear()
s.copy()
s.discard(e)
s.__iter__()
s.__len__()
s.pop()
s.remove(e)


FROZEN SET METHODS
s.copy()
s.__iter__()
s.__len__()